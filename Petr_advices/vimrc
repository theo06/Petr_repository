"
" tmux shit
"
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

"
" Mad skills
"
:syntax on
:set incsearch
:set autowrite
:set number
:set relativenumber
:filetype on
:filetype plugin on
:filetype indent on
:set t_Co=256
:colorscheme elflord
:set path=$PWD**

"
" Cscope
"
:if filereadable("cscope.out")
:	cs add cscope.out
:end
nmap <leader>gs :Gstatus<CR><C-w>H
" s: Find this C symbol
map <leader>fs :cs find s <c-r>expand("<cword>")<CR><CR>
" g: Find this definition
map <leader>fg :cs find g <c-r>=expand("<cword>")<CR><CR>
" d: Find functions called by this function
map <leader>fd :cs find d <c-r>=expand("<cword>")<CR><CR>
" c: Find functions calling this function
map <leader>fc :cs find c <c-r>=expand("<cword>")<CR><CR>
" t: Find this text string
map <leader>ft :cs find t <c-r>=expand("<cword>")<CR><CR>
" e: Find this egrep pattern
map <leader>fe :cs find e <c-r>=expand("<cword>")<CR><CR>
" f: Find this file
map <leader>ff :cs find f <c-r>=expand("<cword>")<CR><CR>
" i: Find files #including this file
map <leader>fi :cs find i <c-r>=expand("<cword>")<CR><CR>

"
" Better shortcuts
"
:map <C-Left> :tabprev<CR>
:map <C-Right> :tabnext<CR>
:nnoremap H :help <c-r><c-w><CR>
:vnoremap // y/<c-r>"<cr>

"
" NERDTree configuration
"
:if system ('uname -n') == "Nokia-N900\n"
    " Theme
    :colorscheme desert
    " Key mapping
    :nmap â‚¬ ^
    :nmap <C-,> <C-]>
    :imap OM <Esc>
    :vmap OM <Esc>
    :map <C-Up> <C-u>
    :map <C-Down> <C-d>
    " NERDTree plugin
    :nmap <C-i> :NERDTreeToggle<CR><C-w><C-w>ZZ
:else
    " NERDTree plugin
    :nmap <F2> :NERDTreeToggle<CR>
    :let g:nerdtree_open_cmd='xdg-open'
    :if filereadable(".NERDTreeBookmarks")
        :let g:NERDTreeBookmarksFile = ".NERDTreeBookmarks"
    :endif
:endif

"
" Vim
"
:autocmd FileType vim iabbr C- <C-><Left>
:autocmd FileType vim set shiftwidth=4
:autocmd FileType vim set shiftwidth=4

"
" C, C++
"
:autocmd FileType c,cc,cpp set cindent
:autocmd FileType c,cc,cpp set shiftwidth=4
:autocmd FileType c,cc,cpp abbreviate #i #include
:autocmd FileType c,cc,cpp abbreviate #d #define

"
" Python
"
autocmd FileType python	let b:comment_leader = '# '
autocmd FileType python	set shiftwidth=4
autocmd FileType python	set tabstop=4
autocmd FileType python	set expandtab
autocmd FileType python	set softtabstop=4

"
" XML
"
autocmd FileType xml set shiftwidth=2

"
" Bash
"
:autocmd FileType bash,sh set shiftwidth=4
:let g:SuperTabLongestEnhanced=1 

"
" Update Last modified field on writing
"
function! UpdateData()
	let line = line ('.')
	let col = col ('.')
	%s/\(\d\d\)\.\(\d\d\)\.\(\d\d\d\d\)\s\(\d\d\)\:\(\d\d\)\:\(\d\d\)$/\=strftime("%d.%m.%Y %T")/e 
	call cursor (line, col)
endfunction
:autocmd BufWritePre *.c,*.cc,*.cpp,*.h,*.hh call UpdateData()

"
" Update tags when file is written
"
function! DelTagOfFile(file)
    let fullpath = a:file
    let cwd = getcwd()
    let tagsFile = cwd . "/tags"
    let f = substitute(fullpath, cwd . "/", "", "")
    let f = escape(f, './')
    let cmd = 'sed -i "/' . f . '/d" "' . tagsFile . '"'
    let resp = system(cmd)
endfunction
function! UpdateTags()
    let cwd = getcwd()
    let tagsFile = cwd . "/tags"
    if filereadable(tagsFile)
    	let f = expand("%:p")
    	let cmd = 'ctags -a -f ' . tagsFile . ' --c-kinds=+p --fields=+iaS --extra=+q ' . '"' . f . '"'
    	call DelTagOfFile(f)
    	let resp = system(cmd)
    endif
endfunction
:autocmd BufWritePost *.c,*.cc,*.cpp,*.h,*.hh call UpdateTags()
